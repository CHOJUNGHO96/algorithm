def solution(작업: list) -> int:
    """
    포인트
    1. 작업시점이 현재시간보다 같거나 적은작업들을 임시 힙에넣어준다. (파이썬 힙자료형은 최소힙 기준으로 정렬되기때문에 작업시간이 적은작업부터 작업진행 할 수있음)
    2. 임시힙에 넣어준애들을 빼서 현재시간에는 뺀 작업의 소요시간을 더해주고 정답에는 소요시간 + (현재시간에 - 시점)을 진행
    3. 작업을 진행했는데 그다음 작업의 작업시점이 현재시간보다 미래이면 현재시간을 다음작업 시점으로 바꾸고 진행
    """
    import heapq

    heapq.heapify(작업)
    임시힙 = []

    작업양 = len(작업)
    현재시간 = 0
    정답 = 0

    # 작업또는 입시힙이 빌때까지 수행
    while 작업 or 임시힙:

        # 남아있는 작업중 현재시간보다 더적거나 같은 애들을 임시힙에 넣어준다
        while 작업 and 현재시간 >= 작업[0][0]:
            시점, 소요시간 = heapq.heappop(작업)
            heapq.heappush(임시힙, (소요시간, 시점))

        # 임시힙에서 뺀 작업(소요시간이 가장적은 작업) 을 계산식 적용해준다.
        if 임시힙:
            소요시간, 시점 = heapq.heappop(임시힙)
            정답 += 소요시간 + (현재시간 - 시점)
            현재시간 += 소요시간
        else:
            # 처음작업 진행후 바로 다음작업 진행을 할수없을경우 그다음 작업의 시점으로 현재시간을 설정해준다
            # ex: 첫번째 작업이 3초걸렸는데 그다음 작업의 시점은 5초부터이면 5초까지 기다렸다 작업을 진행해야하기 때문
            현재시간 = 작업[0][0]

    return 정답 // 작업양


print(solution([[0, 3], [1, 9], [2, 6]]))  # 9
print(solution([[0, 10], [4, 10], [5, 11], [15, 2]]))  # 15
print(solution([[0, 10]]))  # 10
print(solution([[0, 10], [2, 3], [9, 3]]))  # 9
print(solution([[0, 3], [4, 3], [10, 3]]))  # 3
