"""
문제
N×N 크기의 공간에 물고기 M마리와 아기 상어 1마리가 있다. 공간은 1×1 크기의 정사각형 칸으로 나누어져 있다. 한 칸에는 물고기가 최대 1마리 존재한다.

아기 상어와 물고기는 모두 크기를 가지고 있고, 이 크기는 자연수이다. 가장 처음에 아기 상어의 크기는 2이고,
아기 상어는 1초에 상하좌우로 인접한 한 칸씩 이동한다.

아기 상어는 자신의 크기보다 큰 물고기가 있는 칸은 지나갈 수 없고, 나머지 칸은 모두 지나갈 수 있다.
아기 상어는 자신의 크기보다 작은 물고기만 먹을 수 있다. 따라서, 크기가 같은 물고기는 먹을 수 없지만, 그 물고기가 있는 칸은 지나갈 수 있다.

아기 상어가 어디로 이동할지 결정하는 방법은 아래와 같다.

더 이상 먹을 수 있는 물고기가 공간에 없다면 아기 상어는 엄마 상어에게 도움을 요청한다.
먹을 수 있는 물고기가 1마리라면, 그 물고기를 먹으러 간다.
먹을 수 있는 물고기가 1마리보다 많다면, 거리가 가장 가까운 물고기를 먹으러 간다.
거리는 아기 상어가 있는 칸에서 물고기가 있는 칸으로 이동할 때, 지나야하는 칸의 개수의 최솟값이다.
거리가 가까운 물고기가 많다면, 가장 위에 있는 물고기, 그러한 물고기가 여러마리라면, 가장 왼쪽에 있는 물고기를 먹는다.
아기 상어의 이동은 1초 걸리고, 물고기를 먹는데 걸리는 시간은 없다고 가정한다. 즉, 아기 상어가 먹을 수 있는 물고기가 있는 칸으로 이동했다면,
이동과 동시에 물고기를 먹는다. 물고기를 먹으면, 그 칸은 빈 칸이 된다.

아기 상어는 자신의 크기와 같은 수의 물고기를 먹을 때 마다 크기가 1 증가한다. 예를
공간의 상태가 주어졌을 때, 아기 상어가 몇 초 동안 엄마 상어에게 도움을 요청하지  들어, 크기가 2인 아기 상어는 물고기를 2마리 먹으면 크기가 3이 된다.
않고 물고기를 잡아먹을 수 있는지 구하는 프로그램을 작성하시오.

입력
첫째 줄에 공간의 크기 N(2 ≤ N ≤ 20)이 주어진다.

둘째 줄부터 N개의 줄에 공간의 상태가 주어진다. 공간의 상태는 0, 1, 2, 3, 4, 5, 6, 9로 이루어져 있고, 아래와 같은 의미를 가진다.

0: 빈 칸
1, 2, 3, 4, 5, 6: 칸에 있는 물고기의 크기
9: 아기 상어의 위치
아기 상어는 공간에 한 마리 있다.

출력
첫째 줄에 아기 상어가 엄마 상어에게 도움을 요청하지 않고 물고기를 잡아먹을 수 있는 시간을 출력한다.

예제 입력 1
3
0 0 0
0 0 0
0 9 0
예제 출력 1
0

예제 입력 2
3
0 0 1
0 0 0
0 9 0
예제 출력 2
3

예제 입력 3
4
4 3 2 1
0 0 0 0
0 0 9 0
1 2 3 4
예제 출력 3
14

예제 입력 4
6
5 4 3 2 3 4
4 3 2 3 4 5
3 2 9 5 6 6
2 1 2 3 4 5
3 2 1 6 5 4
6 6 6 6 6 6
예제 출력 4
60

예제 입력 6
6
1 1 1 1 1 1
2 2 6 2 2 3
2 2 5 2 2 3
2 2 2 4 6 3
0 0 0 0 0 6
0 0 0 0 0 9
예제 출력 6
39

포인트1 : 가까운거리에 먹이가 여러개일경우 상,좌를 우선으로 먹기위해 tmp_list라는 변수에 먹이 좌표값들 담아두었다가 조건에 맞게 정렬후
가장가까운 좌표에서 bfs실행

포인트2 : 먹이를 먹은곳에서 가장가까운 먹이를 찾아야하므로 먹을때마다 visited는 계속 초기화해줘야한다.
"""
import sys
from collections import deque

input = sys.stdin.readline

N = int(input())
dist_cnt = 0  # 먹은 횟수
shark = 2  # 상어크기
distance = 0  # 거리
graph = []
dx = [0, -1, +1, 0]
dy = [-1, 0, 0, +1]
si = sj = 0
for i in range(N):
    tmp = list(map(int, input().split()))
    if 9 in tmp:
        for idx, j in enumerate(tmp):
            if j == 9:
                si = i
                sj = idx
                tmp[idx] = 0
    graph.append(tmp)


def bfs(ti: int, tj: int) -> int:
    global dist_cnt
    dist_cnt = 0
    q = deque()
    visited = [[[0] * 2 for _ in range(N)] for _ in range(N)]  # 방문체크및 이동한거리를 기록하기위해 3차원 배열로 초기화 [[[0,0],[0,0]]]
    q.append([ti, tj])
    visited[ti][tj][0] = 1  # visited의 0번째 인덱스에는 방문체크를 한다
    while q:
        ti, tj = q.popleft()
        if len(tmp_list) > 0 and dist_cnt == visited[ti][tj][1]:
            """
            return 조건으로 이동한거리와 dist_cnt가 같으면 리턴
            이유는 아래 139라인에서 dist_cnt에 먹이를 먹은 이동거리를 초기화 해주는데
            bfs의 특성상 큐를사용한 4방향의 선입선출 구조이기떄문에 다음 큐에서꺼낸 좌표가 dist_cnt랑 같은 좌표면은 이미 해당
            거리의 인접한 요소들은 전부 체크를 한거나 다름없다
            1 0 1
            0 9 0    <-- 이렇게 있을경우 [0,0] 체크할때 큐에 집어넣으면 큐에 남아있는 [1,0],[1,2],[2,1] 좌표의 bfs가 끝날때까지
            1 0 1        큐에 남아있기때문이다.
            """
            return visited[ti][tj][1]

        for i in range(4):
            y = dy[i] + ti
            x = dx[i] + tj

            if y < 0 or y >= N or x < 0 or x >= N:
                continue

            if graph[y][x] <= shark and visited[y][x][0] == 0:  # 크기가 작거나 같은애만 이동가능함
                q.append([y, x])
                visited[y][x][0] = 1  # 방문체크
                visited[y][x][1] = visited[ti][tj][1] + 1  # 이동한거리 추가
                if graph[y][x] != 0 and graph[y][x] < shark:  # 먹이를 먹을수있을경우
                    tmp_list.append([y, x])  # 먹은거리와 동일한위치에 먹이가 있을수있으므로 우선 tmp_list에 넣는다 상,좌를 우선으로 먹으라는 조건떄문
                    dist_cnt = visited[y][x][1]  # 먹이를 찾은 이동거리 담는다
    return 0


eat_cnt = 0  # 먹은횟수 체크용
tmp_list = [[si, sj]]  # 같은 범위의 먹이들을 담아두는 리스트
while tmp_list:
    si, sj = tmp_list[0]  # 정렬이 끝난 tmp_list의 첫번째 요소의좌표를 기준으로 bfs 시작
    tmp_list = []  # 첫번째 요소를 빼갔으면 그다음의 가까운위치의 좌표를 넣어줘야하므로 초기화
    cnt = bfs(si, sj)  # 리턴값은 이동한거리다

    if len(tmp_list) > 0:
        tmp_list.sort(key=lambda x: (x[0], x[1]))  # 같은 범위에 있는 먹이를 상,좌 순으로 정렬
        distance += cnt
        graph[tmp_list[0][0]][tmp_list[0][1]] = 0  # 먹은곳은 다시 먹을필요가없고 이동할때 편하기위해 0으로 변경
        eat_cnt += 1  # 먹은횟수증가
        # print(f"먹은곳 : {tmp_list[0]}")

    # 상어크기와 먹은횟수가 동일하다면 상어크기 키워야함
    if shark == eat_cnt:  # 상어크기와 먹은횟수가 같다면 상어크기 증가및 먹은횟수 초기화
        eat_cnt = 0
        shark += 1

print(distance)
