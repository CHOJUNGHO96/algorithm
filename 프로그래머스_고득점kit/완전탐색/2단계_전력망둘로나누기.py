def solution(노드_개수, 전선들):
    def dfs(그래프, 시작점, 방문여부):
        # ex : [1, 2], [2, 3], [3, 4] 를 예를들면 1 -> 2 -> 3 -> 4 가 연결되어있는데 이중 1 -> 2를끊을때는 1과 연결된 노드는 없으므로 탐색한_수는 자기자신만 탐색
        # 했으므로 1로 리턴
        탐색한_수 = 0
        스택 = [시작점]
        방문여부[시작점] = True  # 시작 노드를 방문한 것으로 표시

        # 스택에 방문하지않은 노드는 계속 append , 방문했으면 pop을 진행하여 스택이 빌때까지 수행
        while 스택:
            현재_노드 = 스택.pop()
            탐색한_수 += 1  # 노드 개수 증가
            # 꺼낸 노드와 연결된 모든 노드에 대해 방문
            for 인접_노드 in 그래프[현재_노드]:
                # 아직 방문하지 않은 노드가 있으면 방문체크
                if not 방문여부[인접_노드]:
                    스택.append(인접_노드)
                    방문여부[인접_노드] = True
        return 탐색한_수

    # 각 노드가 연결된 정보를 저장하는 리스트
    그래프 = [[] for _ in range(노드_개수 + 1)]

    # 양방향 연결을위한 노드세팅
    # [[1, 2], [2, 3], [3, 4]] -> [[], [2], [1, 3], [2, 4], [3]]
    for v1, v2 in 전선들:
        그래프[v1].append(v2)
        그래프[v2].append(v1)

    # 두 전력망의 송전탑 개수 차이가 가장 작은 값을 찾기
    최소_차이 = 노드_개수

    for v1, v2 in 전선들:
        # 현재 연결 제거
        그래프[v1].remove(v2)
        그래프[v2].remove(v1)

        # 탐색을 통해 한 부분의 송전탑 개수 계산
        방문여부 = [False] * (노드_개수 + 1)
        탐색한_수 = dfs(그래프, v1, 방문여부)

        # 송전탑 개수 차이 계산하고, 최소값 업데이트
        최소_차이 = min(최소_차이, abs(탐색한_수 - (노드_개수 - 탐색한_수)))

        # 연결 다시 복구
        그래프[v1].append(v2)
        그래프[v2].append(v1)

    return 최소_차이


# 다른사람풀이
def solution1(n, wires):
    ans = n  # 최소 차이를 저장할 변수, 초기값으로 전체 송전탑 개수를 설정

    # 모든 전선 분리 조합을 시도
    for sub in (wires[i + 1 :] + wires[:i] for i in range(len(wires))):
        s = set(sub[0])  # 첫 번째 전선의 연결된 두 송전탑을 집합 s에 저장

        # 집합 s에 연결된 모든 송전탑을 추가
        [s.update(v) for _ in sub for v in sub if set(v) & s]  # 여기서 중요한 것은 집합 s에 있는 송전탑과 연결된 송전탑을 찾아 추가

        # 두 부분의 송전탑 수 차이 계산 및 최소값 업데이트
        ans = min(ans, abs(2 * len(s) - n))  # 한 부분의 크기를 2배하여 전체에서 빼면 다른 한 부분의 크기임 이 차이를 최소값과 비교하여 업데이트

    return ans  # 최소 차이 반환


# print(solution(9, [[1, 3], [2, 3], [3, 4], [4, 5], [4, 6], [4, 7], [7, 8], [7, 9]]))  # 3
print(solution(4, [[1, 2], [2, 3], [3, 4]]))  # 0  [3,2,4], [2,3,4]
print(solution(7, [[1, 2], [2, 7], [3, 7], [3, 4], [4, 5], [6, 7]]))  # 1
